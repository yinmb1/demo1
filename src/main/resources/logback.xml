<?xml version="1.0" encoding="UTF-8" ?>
<configuration >

    <springProperty scope="context" name="logPath" source="logging1.path"/>
    <springProperty scope="context" name="logLevel" source="logging.level.root"/>
    <conversionRule conversionWord="msg" converterClass="yy.demo.demo1.log.sensitive.SensitiveDataConverter"> </conversionRule>
    <!-- 获取ip -->
    <conversionRule conversionWord="ip" converterClass="yy.demo.demo1.log.config.IpLogConfig"/>

    <!-- 自定义日期 -->
    <define name="LOG_DATE" class="yy.demo.demo1.log.config.DateLogConfig"/>
    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log -->
    <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->
    <appender name="businessAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/ymb_${LOG_DATE}}.log</file>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <fileNamePattern>${logPath}/ymb_%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为180天 -->
            <maxHistory>180</maxHistory>
            <!--  maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>20kB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder>
            <!-- pattern节点，用来设置日志的输入格式 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %ip%X{requestId} %thread %level %logger:%line %msg%n</pattern>
            <!-- 记录日志的编码:此处设置字符集 - -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %ip%X{requestId} %thread %level %logger:%line %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <logger name="yy.demo.demo1.mybaits.mapper" level="DEBUG"/>

    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
    <!-- com.liyan为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->

    <!--<logger name="com.lm.bid.dao" level="DEBUG"/>-->

    <!-- 控制台输出日志级别 -->
    <root level="%{logLevel}">
        <appender-ref ref="businessAppender"/>
        <appender-ref ref="consoleAppender"/>
    </root>

</configuration>